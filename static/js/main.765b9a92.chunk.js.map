{"version":3,"sources":["types/typedefs.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","constants.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["FieldType","MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","PATTERN_URL","PATTERN_URL_IMAGE","TextField","name","value","isValid","label","required","onChange","validationPattern","useState","Math","random","toString","slice","id","touched","setToched","hasError","hasInvalidError","htmlFor","classNames","type","placeholder","event","text","inputValue","target","test","onBlur","IMAGEURL","fieldsInitialState","TITLE","DESCRIPTION","IMDBURL","IMDBID","validationsInitialState","NewMovie","onAdd","count","increaseCount","fieldsValues","setFieldsValues","fieldsValidations","setFieldsValidations","handleFieldChange","status","state","couldSubmitForm","Object","values","every","onSubmit","preventDefault","prev","disabled","App","moviesFromServer","addMovie","oldMoviesList","ReactDOM","render","document","getElementById"],"mappings":"gqEAQYA,E,yECACC,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,cCR9BC,EAAc,uKACdC,EAAoB,2L,SHKrBhB,K,cAAAA,E,0BAAAA,E,kBAAAA,E,kBAAAA,E,iBAAAA,M,yBIgBL,I,IAAMiB,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MAMI,IALJC,eAKI,aAJJC,aAII,MAJIH,EAIJ,MAHJI,gBAGI,aAFJC,gBAEI,MAFO,WAAQ,EAEf,EADJC,EACI,EADJA,kBAEA,EAAaC,oBAAS,2BAASP,EAAT,YAZfQ,KAAKC,SAASC,WAAWC,MAAM,GAYhB,IAAfC,EAAP,oBACA,EAA6BL,oBAAS,GAAtC,mBAAOM,EAAP,KAAgBC,EAAhB,KAEMC,EAAWF,GAAWT,IAAaH,EACnCe,GAAmBd,GAAWI,GAAqBL,EAczD,OACE,sBAAKhB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQgC,QAASL,EAAlC,SACGT,IAGH,qBAAKlB,UAAU,UAAf,SACE,uBACEe,KAAMA,EACNY,GAAIA,EACJ,0BAAkBZ,GAClBf,UAAWiC,IAAW,QAAS,CAC7B,YAAaH,GAAYC,IAE3BG,KAAK,OACLC,YAAW,gBAAWjB,GACtBF,MAAOA,EACPI,SAAU,SAACgB,GACT,IA9BYC,EA+BHC,EACLF,EAAMG,OADRvB,MAGFI,EAASL,EAAMuB,GAlCHD,EAkC4BC,EAjC5CjB,EACKA,EAAkBmB,KAAKH,IAG5BlB,GACc,KAATkB,GA6BF,EACDI,OAAQ,kBAAMZ,GAAU,EAAhB,MAIXC,GACC,mBAAG9B,UAAU,iBAAb,mBACMkB,EADN,kBAKDa,GACC,oBAAG/B,UAAU,iBAAb,kDAEGe,IAASlB,EAAU6C,UAAY,qCAKzC,ECpEKC,GAA+B,mBAClC9C,EAAU+C,MAAQ,IADgB,cAElC/C,EAAUgD,YAAc,IAFU,cAGlChD,EAAU6C,SAAW,IAHa,cAIlC7C,EAAUiD,QAAU,IAJc,cAKlCjD,EAAUkD,OAAS,IALe,GAQ/BC,GAA+C,mBAClDnD,EAAU+C,OAAQ,GADgC,cAElD/C,EAAUgD,aAAc,GAF0B,cAGlDhD,EAAU6C,UAAW,GAH6B,cAIlD7C,EAAUiD,SAAU,GAJ8B,cAKlDjD,EAAUkD,QAAS,GAL+B,GAQxCE,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAG1C,EAA+B5B,mBAAS,GAAxC,mBAAO6B,EAAP,KAAcC,EAAd,KACA,EAAwC9B,mBAASqB,GAAjD,mBAAOU,EAAP,KAAqBC,EAArB,KAEA,EAGIhC,mBAAS0B,GAHb,mBACEO,EADF,KAEEC,EAFF,KAKMC,EAAyC,SAAC1C,EAAMC,EAAO0C,GAC3DJ,GAAgB,SAACK,GAAD,mBAAC,eACZA,GADW,kBAEb5C,EAAOC,GAFM,IAKZD,IAASlB,EAAUgD,aACrBW,GAAqB,SAACG,GAAD,mBAAC,eACjBA,GADgB,kBAElB5C,EAAO2C,GAFW,GAKxB,EAQKE,EAAkBC,OAAOC,OAAOP,GACnCQ,OAAM,SAAA/C,GAAK,OAAIA,CAAJ,IAEd,OACE,uBACEhB,UAAU,WAEVgE,SAAU,SAAC5B,GACTA,EAAM6B,iBACNf,EAAM,eAAKG,IAdfG,EAAqBR,GACrBM,EAAgBX,GAChBS,GAAc,SAAAc,GAAI,OAAIA,EAAO,CAAX,GAcf,EAPH,UASE,oBAAIlE,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEe,KAAMlB,EAAU+C,MAChB1B,MAAM,QACNF,MAAOqC,EAAaxD,EAAU+C,OAC9BxB,SAAUqC,EACVtC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAMlB,EAAUgD,YAChB3B,MAAM,cACNF,MAAOqC,EAAaxD,EAAUgD,aAC9BzB,SAAUqC,IAGZ,cAAC,EAAD,CACE1C,KAAMlB,EAAU6C,SAChBxB,MAAM,YACNF,MAAOqC,EAAaxD,EAAU6C,UAC9BzB,QAASsC,EAAkB1D,EAAU6C,UACrCtB,SAAUqC,EACVpC,kBAAmBR,EACnBM,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAMlB,EAAUiD,QAChB5B,MAAM,WACNF,MAAOqC,EAAaxD,EAAUiD,SAC9B7B,QAASsC,EAAkB1D,EAAUiD,SACrCzB,kBAAmBT,EACnBQ,SAAUqC,EACVtC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAMlB,EAAUkD,OAChB7B,MAAM,UACNF,MAAOqC,EAAaxD,EAAUkD,QAC9B3B,SAAUqC,EACVtC,UAAQ,IAGV,qBAAKnB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEkC,KAAK,SACL,UAAQ,gBACRlC,UAAU,iBACVmE,UAAWP,EAJb,uBAtDCT,EAkEV,E,QCzIYiB,EAAgB,WAC3B,MAA2B9C,mBAAS+C,GAApC,mBAAO5D,EAAP,KAAe6D,EAAf,KAWA,OACE,sBAAKtE,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CAAUkD,MAfF,SAACnD,GACbuE,GAAS,SAACC,GACR,MAAM,GAAN,mBACKA,GADL,CAEExE,GAEH,GACF,QAYF,ECzBDyE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.765b9a92.chunk.js","sourcesContent":["export interface Movie {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n}\n\nexport enum FieldType {\n  TITLE = 'title',\n  DESCRIPTION = 'description',\n  IMAGEURL = 'imgUrl',\n  IMDBURL = 'imdbUrl',\n  IMDBID = 'imdbId',\n}\n","import React from 'react';\nimport { Movie } from '../../types/typedefs';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/typedefs';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","/* eslint-disable max-len */\n\nexport const PATTERN_URL = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\nexport const PATTERN_URL_IMAGE = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?).(jpg|jpeg|png|gif)$/;\n\n// const pattern = /(https?:\\/\\/|www\\.)[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n// this pattern is better, but one of the links in tests can't pass it\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { FieldType } from '../../types/typedefs';\n\ntype Props = {\n  name: string,\n  value: string,\n  isValid?: boolean,\n  label?: string,\n  required?: boolean,\n  onChange?: HandleTextFieldType,\n  validationPattern?: RegExp,\n};\n\nexport type HandleTextFieldType = (\n  name: string,\n  value:string,\n  status: boolean\n) => void;\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  isValid = false,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validationPattern,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setToched] = useState(false);\n\n  const hasError = touched && required && !value;\n  const hasInvalidError = !isValid && validationPattern && value;\n\n  const isInputValid = (text: string): boolean => {\n    if (validationPattern) {\n      return validationPattern.test(text);\n    }\n\n    if (required) {\n      return text !== '';\n    }\n\n    return true;\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasInvalidError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={(event) => {\n            const {\n              value: inputValue,\n            } = event.target;\n\n            onChange(name, inputValue, isInputValid(inputValue));\n          }}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {`${label} is required`}\n        </p>\n      )}\n\n      {hasInvalidError && (\n        <p className=\"help is-danger\">\n          Link must start with www. or https://\n          {name === FieldType.IMAGEURL && ' and end with .jpeg/.png/etc.'}\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { PATTERN_URL, PATTERN_URL_IMAGE } from '../../constants';\nimport { Movie, FieldType } from '../../types/typedefs';\nimport { TextField, HandleTextFieldType } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\ntype FieldsState = {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n};\n\ntype FieldsValidationsState = {\n  title: boolean;\n  description: boolean;\n  imgUrl: boolean;\n  imdbUrl: boolean;\n  imdbId: boolean;\n};\n\nconst fieldsInitialState: FieldsState = {\n  [FieldType.TITLE]: '',\n  [FieldType.DESCRIPTION]: '',\n  [FieldType.IMAGEURL]: '',\n  [FieldType.IMDBURL]: '',\n  [FieldType.IMDBID]: '',\n};\n\nconst validationsInitialState: FieldsValidationsState = {\n  [FieldType.TITLE]: false,\n  [FieldType.DESCRIPTION]: true,\n  [FieldType.IMAGEURL]: false,\n  [FieldType.IMDBURL]: false,\n  [FieldType.IMDBID]: false,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `FieldType`s\n  const [count, increaseCount] = useState(0);\n  const [fieldsValues, setFieldsValues] = useState(fieldsInitialState);\n\n  const [\n    fieldsValidations,\n    setFieldsValidations,\n  ] = useState(validationsInitialState);\n\n  const handleFieldChange: HandleTextFieldType = (name, value, status) => {\n    setFieldsValues((state) => ({\n      ...state,\n      [name]: value,\n    }));\n\n    if (name !== FieldType.DESCRIPTION) {\n      setFieldsValidations((state) => ({\n        ...state,\n        [name]: status,\n      }));\n    }\n  };\n\n  const clearForm = () => {\n    setFieldsValidations(validationsInitialState);\n    setFieldsValues(fieldsInitialState);\n    increaseCount(prev => prev + 1);\n  };\n\n  const couldSubmitForm = Object.values(fieldsValidations)\n    .every(value => value);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event) => {\n        event.preventDefault();\n        onAdd({ ...fieldsValues });\n        clearForm();\n      }}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name={FieldType.TITLE}\n        label=\"Title\"\n        value={fieldsValues[FieldType.TITLE]}\n        onChange={handleFieldChange}\n        required\n      />\n\n      <TextField\n        name={FieldType.DESCRIPTION}\n        label=\"Description\"\n        value={fieldsValues[FieldType.DESCRIPTION]}\n        onChange={handleFieldChange}\n      />\n\n      <TextField\n        name={FieldType.IMAGEURL}\n        label=\"Image URL\"\n        value={fieldsValues[FieldType.IMAGEURL]}\n        isValid={fieldsValidations[FieldType.IMAGEURL]}\n        onChange={handleFieldChange}\n        validationPattern={PATTERN_URL_IMAGE}\n        required\n      />\n\n      <TextField\n        name={FieldType.IMDBURL}\n        label=\"Imdb URL\"\n        value={fieldsValues[FieldType.IMDBURL]}\n        isValid={fieldsValidations[FieldType.IMDBURL]}\n        validationPattern={PATTERN_URL}\n        onChange={handleFieldChange}\n        required\n      />\n\n      <TextField\n        name={FieldType.IMDBID}\n        label=\"Imdb ID\"\n        value={fieldsValues[FieldType.IMDBID]}\n        onChange={handleFieldChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!couldSubmitForm}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/typedefs';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, addMovie] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    addMovie((oldMoviesList) => {\n      return [\n        ...oldMoviesList,\n        movie,\n      ];\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}